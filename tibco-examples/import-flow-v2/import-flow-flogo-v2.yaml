apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: import-flow-flogo-v2
  title: Import flow for Flogo projects
  description: Import existing Flogo projects into TIBCO Developer Hub
  tags:
    - import-flow
    - tibco
    - template
    - developer-hub
spec:
  owner: group:default/tibco-imported
  type: import-flow

  parameters:
    - title: Repository Location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: GitHub repository with Existing Flogo Project
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

    - title: Fill in some steps
      required:
        - application
        - owner
      properties:
        application:
          title: Flogo Application
          type: string
          description: Name of the Flogo Application to import
        owner:
          title: Owner
          type: string
          description: Owner of the template
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group

  # The import flow consist out of 4 steps:
  # 1. Fetch the project from GitHub
  # 2. Generate the Component YAML
  # 3. Commit the Component YAML file back to the GitHub project branch creating a pull request
  # 4. Register the Component in the catalog

  steps:
    - id: clone
      name: Clone the Project
      action: tibco:git:clone
      input:
        failOnError: true
        repoUrl: ${{ "https://"  + (parameters.repoUrl | parseRepoUrl).host + "/" + (parameters.repoUrl | parseRepoUrl).owner + "/" +  (parameters.repoUrl | parseRepoUrl).repo }}

    - id: extract
      name: Extract Parameters
      action: tibco:extract-parameters
      input:
        failOnError: true
        extractParameters:
          flogo_project_name:
            type: json
            filePath: ${{ parameters.application }}
            jsonPath: $.name
          flogo_project_description:
            type: json
            filePath: ${{ parameters.application }}
            jsonPath: $.description

    # extractParameters type xml, file and workspace also supported
    #         example_parameter1:
    #           type: xml
    #           filePath: <File path>
    #           xPath: <xpath>
    #         example_parameter2:
    #           type: file
    #           filePath: <File path>
    #           regex: <Regex>
    #         example_parameter3:
    #           type: workspace
    #           onlyName: true
    #           directoryPath: <Directory path>
    #           regex: <Regex>

    - id: createYaml
      name: Create YAML
      action: tibco:create-yaml
      input:
        # Add application name
        # outputFile: flogo-catalog-info.yaml
        outputFile: ${{ parameters.application + "-flogo-catalog-info.yaml" }}
        # outputFile: "catalog-info-flogo.yaml"
        outputStructure:
          apiVersion: backstage.io/v1alpha1
          kind: Component
          metadata:
            name: ${{ steps.extract.output.flogo_project_name[0]}}
            description: ${{ steps.extract.output.flogo_project_description[0] }}
            tags:
              - flogo
            links:
              - title: TIBCO Flogo Enterprise
                url: https://docs.tibco.com/products/tibco-flogo-enterprise
            annotations:
              github.com/project-slug: ${{ "https://"  + (parameters.repoUrl | parseRepoUrl).host + "/" + (parameters.repoUrl | parseRepoUrl).owner + "/" +  (parameters.repoUrl | parseRepoUrl).repo }}
              # backstage.io/techdocs-ref: dir:.
          spec:
            type: flogo
            lifecycle: production
            owner: ${{ parameters.owner }}

    # The import flow debug step, enable it for debugging

    #   - id: Log Debug
    #     name: Debug Log
    #     action: debug:log
    #     input:
    #       message: "Fetched the Flogo Skeleton template"
    #       listWorkspace: true
    #       flogo_project_name: ${{ steps.extract.output.flogo_project_name[0] }}
    #       flogo_project_description: ${{ steps.extract.output.flogo_project_description[0] }}
    #       repoUrl: ${{ parameters.repoUrl }}

    - id: push
      name: Push Current Repo
      action: tibco:git:push
      input:
        failOnError: true

    # Optionally you can leave this step out, if your developer hub synchronize with the GitHub organization
    # When the pull request is merged, the component will be registered by the GitHub catalog provider, below is the example configuration
    # catalog:
    #   providers:
    #     github:
    #       providerId:
    #         organization: '<organization>'
    #         catalogPath: '**/*catalog-info.yaml'
    #         schedule:
    #           frequency: { minutes: 30 }

    - id: register
      name: Register
      action: catalog:register
      input:
        catalogInfoUrl: ${{ "https://"  + (parameters.repoUrl | parseRepoUrl).host + "/" + (parameters.repoUrl | parseRepoUrl).owner + "/" +  (parameters.repoUrl | parseRepoUrl).repo + "/blob/" + parameters.application.replace("/", ".") + '/' + parameters.application + "-flogo-catalog-info.yaml" }}

  output:
    links:
      # If you are not using register step above, remove the below Open in catalog link.
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: Repository (Pull Request)
        url: ${{ steps.cpr.output.remoteUrl }}
