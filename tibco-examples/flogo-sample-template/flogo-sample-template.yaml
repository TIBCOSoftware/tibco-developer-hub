apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: flogo-sample-template
  title: Flogo Call Service Template
  description: Create a new Flogo project that Call a Service
  tags:
    - flogo
    - tibco
    - recommended
spec:
  owner: tibco-templates
  type: service

  parameters:
    - title: Fill in some steps
      required:
        - name
        - description
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the Flogo Service
          ui:field: EntityNamePicker
          ui:autofocus: true
        description:
          title: Description
          type: string
          description: A description for the Flogo Service
          default: 'A service that makes an external call'
        urlToCall:
          title: URL to Call
          type: string
          description: The URL that the flogo service should call
        localFolder:
          title: Local Working Folder
          type: string
          description: Folder that VSCode should open
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # This template is meant to be used on top of an existing template.
  # By adding the following and fetching from an absolute URL you can
  # add in the docs template
  steps:
    - id: fetch
      name: Flogo Skeleton
      action: fetch:template
      input:
        url: ./skeleton
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          owner: ${{ parameters.owner }}
          localFolder: ${{ parameters.localFolder }}
          urlToCall: ${{ parameters.urlToCall }}

    - id: publish
      name: Publish
      action: publish:github
      input:
#       allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
