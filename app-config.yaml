app:
  title: TIBCO® Developer Hub
  baseUrl: http://localhost:3000/tibco/hub
  support:
    url: https://support.tibco.com/s/
    items:
      - title: 'TIBCO Support Page'
        icon: 'email'
        links:
          - url: 'https://support.tibco.com/s/'
            title: 'TIBCO Support'
      - title: 'TIBCO Documentation Page'
        icon: 'docs'
        links:
          - url: 'https://docs.tibco.com/go/platform-cp/1.3.0/doc/html#cshid=developer_hub_overview'
            title: 'TIBCO® Developer Hub Documentation'
  developerHubVersion: 1.3.0
organization:
  name: TIBCO Software's
backend:
  auth:
    dangerouslyDisableDefaultAuthPolicy: true
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007/tibco/hub
  listen:
    port: 7007
    # Uncomment the following host directive to bind to all IPv4 interfaces and
    # not just the baseUrl hostname.
    # host: 0.0.0.0
  # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
  # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    #    client: better-sqlite3
    #    connection: ':memory:'
    #  cache:
    #    store: memory
    # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
    # config options: https://node-postgres.com/api/client
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      # https://node-postgres.com/features/ssl
      #ssl: require # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      #ca: # if you have a CA file and want to verify it you can uncomment this section
      #$file: <file-path>/ca/server.crt
integrations:
  github:
    - host: github.com
      # apps:
      #   - $include: github-backstage-app-credentials.yaml
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: ${GITHUB_TOKEN}
      ### Example for how to add your GitHub Enterprise instance using the API:
      # - host: ghe.example.net
      #   apiBaseUrl: https://ghe.example.net/api/v3
      #   token: ${GHE_TOKEN}
# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
    # runIn: 'docker' # Alternatives - 'local'
    # dockerImage: 'mkdocs:local-dev'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  # uncomment 3 lines below and add organization name in place of <YOUR-ORG-NAME> to support sign in through gitHub
  # signIn:
  #  github:
  #   organizations: ['<YOUR-ORG-NAME>']
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    #guest: null
    # Needs to be enabled if you want to try out Github auth
    # See https://backstage.io/docs/auth/github/provider to learn about GitHub Authentication Provider
    # While creating OAuth App on GitHub, The Homepage URL should point to TIBCO® Developer Hub frontend including '/tibco/hub' in the URL ,while the Authorization callback URL will point to the TIBCO® Developer Hub backend which also includes '/tibco/hub' in the URL
    # AUTH_GITHUB_CLIENT_ID and AUTH_GITHUB_CLIENT_SECRET should be set using kubernetes secrets in the data plane
    # Example:
    # Homepage URL: http://devhub-host/tibco/hub
    # Authorization callback URL: http://devhub-host/tibco/hub/api/auth/github/handler/frame
    #   github:
    #     development:
    #       clientId: ${AUTH_GITHUB_CLIENT_ID}
    #       clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
    oauth2Proxy:
      development: {}
  enableAuthProviders: [oauth2Proxy]
  #   Available providers:
  #   for local deployments
  #     [github, oauth2Proxy, guest]
  #   for deployments in a Dataplane:
  #    [ oauth2Proxy ]
  # IMPORTANT! oauth2Proxy provider:
  # If you allow oauth2Proxy in the available providers, it will be used by default over other providers.
  # If you wish to use other providers, remove oauth2Proxy from available providers.
scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  defaultAuthor:
    name: TIBCO® Developer Hub # Defaults to `Scaffolder`
    email: test@test.com # Defaults to `scaffolder@backstage.io`
  defaultCommitMessage: 'Initial commit' # Defaults to 'Initial commit'
catalog:
  locations: []
# GitHub rate limits API requests to 5,000 per hour (or more for Enterprise accounts).
# For more information, visit https://backstage.io/docs/integrations/github/discovery/#github-api-rate-limits-1
# You can set the refresh rate of catalog (in milliseconds) for catalog API to fetch changes from GitHub, by using the below config.
# The allowed range is [100,900]
# catalogRefreshDelayInSec: 300

# app-config.yaml
proxy:
  '/jenkins/api':
    target: ${JENKINS_URL}
    #'https://jenkins.localhost.dataplanes.pro/'
    changeOrigin: true
    headers:
      Authorization: Basic ${JENKINS_BASIC_AUTH_HEADER}
jenkins:
  baseUrl: ${JENKINS_URL}
  #https://jenkins.localhost.dataplanes.pro/
  username: devhub-bot
  apiKey: ${JENKINS_BASIC_AUTH_HEADER}
  jenkinsActionSecretEncryptionKey: ZGVtbzEyMw==
  jenkinsActionJobAuthToken: ${JENKINS_JOB_AUTH_TOKEN}
  #BuildEARToken
